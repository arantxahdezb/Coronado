<?php

/**
 * @file
 * Website Speed module, for keeping track of page speeds.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;

/**
 * Implements hook_help().
 */
function website_speed_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Show contents of README.md per documentation here
    // https://www.drupal.org/docs/develop/managing-a-drupalorg-theme-module-or-distribution-project/documenting-your-project/module-documentation-guidelines.
    case 'help.page.website_speed':
      $text = file_get_contents(__DIR__ . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}


/**
 * Implements hook_theme().
 */
function website_speed_theme() {
  return [
    'website_speed_chart' => [
      'template' => 'website_speed_chart',
      'variables' => [
        'library' => '',
        'categories' => [],
        'seriesData' => [],
        'options' => [],
        'id' => '',
      ],
    ],
  ];
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_website_speed_chart(&$variables) {
  $moduleHandler = \Drupal::service('module_handler');
  // Override chart capabilities only if charts module is installed.
  if ($moduleHandler->moduleExists('charts')) {
    // Charts override settings applied at this point.
    $chartOverridePluginManager = \Drupal::service('plugin.manager.charts_override');
    $plugin_definition = [];
    $chartOverrideOptions = [];
    try {
      $plugin_definition = $chartOverridePluginManager->getDefinition($variables['library'] . '_overrides');
      if (!empty($plugin_definition)) {
        $chartOverridePlugin = $chartOverridePluginManager->createInstance($variables['library'] . '_overrides');
        $chartOverrideOptions = $chartOverridePlugin->chartOverrides($variables['options']);
      }
    }
    catch (PluginNotFoundException $e) {
      \Drupal::service('messenger')
        ->addMessage(t('Exception: @error', ['@error', $e->getMessage()]));
    }

    $plugin_manager = \Drupal::service('plugin.manager.charts');
    $plugin = $plugin_manager->createInstance($variables['library']);
    $plugin->buildVariables($variables['options'], $variables['id'], $variables, $variables['categories'], $variables['seriesData'], [], $chartOverrideOptions);
  }
}

/**
 * Implements hook_cron().
 */
function website_speed_cron() {
  // Cleanup the website_speed_timings table.
  $row_limit = \Drupal::config('website_speed.settings')->get('timings_to_retain');

  // For row limit n, get the wid of the nth row in descending wid order.
  // Counting the most recent n rows avoids issues with wid number sequences,
  // e.g. auto_increment value > 1 or rows deleted directly from the table.
  if ($row_limit > 0) {
    $connection = \Drupal::database();
    $min_row = $connection->select('website_speed_timings', 'w')
      ->fields('w', ['id'])
      ->orderBy('id', 'DESC')
      ->range($row_limit - 1, 1)
      ->execute()->fetchField();

    // Delete all table entries older than the nth row, if nth row was found.
    if ($min_row) {
      $connection->delete('website_speed_timings')
        ->condition('id', $min_row, '<')
        ->execute();
    }
  }
}